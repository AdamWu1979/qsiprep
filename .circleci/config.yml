version: 2
jobs:

  build_n_pytest:
    machine:
      image: circleci/classic:201711-01
    working_directory: /tmp/tests
    environment:
      TZ: "/usr/share/zoneinfo/America/Los_Angeles"
    steps:
      - restore_cache:
          keys:
            - build-v1-{{ .Branch }}-{{ epoch }}
            - build-v1-{{ .Branch }}-
            - build-v1-master-
            - build-v1-
          paths:
            - /tmp/docker
      - run:
          name: Set-up a Docker registry
          command: |
            docker run -d -p 5000:5000 --restart=always --name=registry \
                -v /tmp/docker:/var/lib/registry registry:2
      - run:
          name: Pull images
          command: |
            set +e
            docker pull localhost:5000/cuda9
            success=$?
            set -e
            if [[ "$success" = "0" ]]; then
                echo "Pulling from local registry"
                docker tag localhost:5000/cuda9 nvidia/cuda:9.1-runtime-ubuntu16.04
                docker pull localhost:5000/qsiprep
                docker tag localhost:5000/qsiprep pennbbl/qsiprep:latest
                docker tag localhost:5000/qsiprep pennbbl/qsiprep
            else
                echo "Pulling from Docker Hub"
                docker pull nvidia/cuda:9.1-runtime-ubuntu16.04
                docker tag nvidia/cuda:9.1-runtime-ubuntu16.04 localhost:5000/cuda9
                docker push localhost:5000/cuda9
                docker pull pennbbl/qsiprep:latest
            fi
      - checkout:
          path: /tmp/src/qsiprep
      - run:
          name: Build Docker image
          no_output_timeout: 60m
          command: |
            cd /tmp/src/qsiprep
            export PY3=$(pyenv versions | grep '3\.' |
                         sed -e 's/.* 3\./3./' -e 's/ .*//')
            pyenv local $PY3
            # Get version, update files.
            THISVERSION=$( python3 get_version.py )
            if [[ ${THISVERSION:0:1} == "0" ]] ; then
              echo "WARNING: latest git tag could not be found"
              echo "Please, make sure you fetch all tags from upstream with"
              echo "the command ``git fetch --tags --verbose`` and push"
              echo "them to your fork with ``git push origin --tags``"
            fi
            # Build docker image
            e=1 && for i in {1..5}; do
              docker build --rm \
                --cache-from=pennbbl/qsiprep \
                -t pennbbl/qsiprep:latest \
                --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
                --build-arg VCS_REF=`git rev-parse --short HEAD` \
                --build-arg VERSION="${CIRCLE_TAG:-$THISVERSION}" . \
              && e=0 && break || sleep 15
            done && [ "$e" -eq "0" ]
      - run:
          name: Docker push to local registry
          no_output_timeout: 40m
          command: |
            docker tag pennbbl/qsiprep:latest localhost:5000/qsiprep
            docker push localhost:5000/qsiprep
      - run:
          name: Docker registry garbage collection
          command: |
            docker exec -it registry /bin/registry garbage-collect --delete-untagged \
                /etc/docker/registry/config.yml
      - save_cache:
         key: build-v1-{{ .Branch }}-{{ epoch }}
         paths:
            - /tmp/docker

  load_docker:
    machine:
      image: circleci/classic:201711-01
    working_directory: /tmp/src/
    steps:
      - restore_cache:
          keys:
            - build-v1-{{ .Branch }}-{{ epoch }}
            - build-v1-{{ .Branch }}-
            - build-v1-master-
            - build-v1-
          paths:
            - /tmp/docker
      - run:
          name: Set-up a Docker registry
          command: |
            docker run -d -p 5000:5000 --restart=always --name=registry \
                -v /tmp/docker:/var/lib/registry registry:2
      - run:
          name: Pull images from local registry
          command: |
            docker pull localhost:5000/qsiprep
            docker tag localhost:5000/qsiprep pennbbl/qsiprep:latest

workflows:
  version: 2
  build_deploy:
    jobs:
      - build_n_pytest:
          filters:
            branches:
              ignore:
                - /docs?\/.*/
            tags:
              only: /.*/

      - load_docker:
          requires:
            - build_n_pytest
          filters:
            branches:
              ignore:
                - /docs?\/.*/
            tags:
              only: /.*/
